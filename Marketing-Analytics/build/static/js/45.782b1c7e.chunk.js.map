{"version":3,"file":"static/js/45.782b1c7e.chunk.js","mappings":"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","sources":["views/KeywordGraphView/KeywordGraphView.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchKeywordSummaryRecords, fetchTotalKeywordSummaryRecords } from '../../store/actions';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Select,\r\n    MenuItem,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { Delete as DeleteIcon, Edit as EditIcon, Save as SaveIcon, Cancel as CancelIcon } from '@mui/icons-material';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InfinitySpin } from 'react-loader-spinner';\r\nconst colorsArray = ['#FF5733', '#3498DB', '#27AE60', '#E74C3C'];\r\nimport { BASE_BACKEND_URL } from '../../constants';\r\nimport { toast } from 'react-toastify';\r\nclass KeywordGraphView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedOption: 'day', // 'day' for Day Wise, 'month' for Month Wise\r\n            selectedMonth: new Date().getMonth() + 1, // Get the current month (1-12)\r\n            selectedYear: new Date().getFullYear(), // Get the current year\r\n            isLoading: false,\r\n            rig_options: {\r\n                title: {\r\n                    text: 'Rig Count Analysis'\r\n                }\r\n            },\r\n            well_options: {\r\n                title: {\r\n                    text: 'Well Count Analysis'\r\n                }\r\n            },\r\n            esp_install_options: {\r\n                title: {\r\n                    text: 'ESP Install Trends'\r\n                }\r\n            },\r\n            esp_pull_options: {\r\n                title: {\r\n                    text: 'ESP Pull Trends'\r\n                }\r\n            },\r\n            competitor_options: {\r\n                title: {\r\n                    text: 'Competitor Analysis'\r\n                }\r\n            }\r\n        };\r\n    }\r\n    handleOptionChange = (event) => {\r\n        this.setState({ selectedOption: event.target.value });\r\n    };\r\n\r\n    handleMonthChange = (event) => {\r\n        this.setState({ selectedMonth: parseInt(event.target.value) });\r\n    };\r\n\r\n    handleYearChange = (event) => {\r\n        this.setState({ selectedYear: parseInt(event.target.value) });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchData();\r\n    }\r\n    fetchData = () => {\r\n        const { selectedOption, selectedMonth, selectedYear } = this.state;\r\n        const queryString = `?selectedOption=${selectedOption}&month=${selectedMonth}&year=${selectedYear}`;\r\n\r\n        // Make your API call here using selectedOption, selectedMonth, and selectedYear\r\n        // For example: you can use fetch() or axios to make the API call to your backend.\r\n        // Set isLoading to true before the API call and set it back to false after the data is fetched.\r\n\r\n        // Simulating API call with a timeout\r\n        this.setState({ isLoading: true });\r\n\r\n        fetch(`${BASE_BACKEND_URL}/api/graph_data${queryString}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                // Handle the fetched data here\r\n                // console.log('Fetched Data:', data);\r\n                const rig_options = {\r\n                    chart: {\r\n                        type: 'column'\r\n                    },\r\n                    title: {\r\n                        text: 'Rig Count Analysis'\r\n                    },\r\n                    xAxis: {\r\n                        categories: data.result.map((item) => item._id)\r\n                    },\r\n                    yAxis: {\r\n                        title: {\r\n                            text: 'Count'\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'Rig Count',\r\n                            data: data.result.map((item) => item.rig_count)\r\n                        }\r\n                    ],\r\n                    credits: {\r\n                        enabled: false\r\n                    },\r\n                    plotOptions: {\r\n                        column: {\r\n                            colorByPoint: true, // Apply colors individually to each column\r\n                            colors: ['#90caf96e', '#1e88e5', '#673ab7', '#d6d0de' /* Add more colors */]\r\n                        }\r\n                    }\r\n                };\r\n                const well_options = {\r\n                    chart: {\r\n                        type: 'column'\r\n                    },\r\n                    title: {\r\n                        text: 'Well Count Analysis'\r\n                    },\r\n                    xAxis: {\r\n                        categories: data.result.map((item) => item._id)\r\n                    },\r\n                    yAxis: {\r\n                        title: {\r\n                            text: 'Count'\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'Well Count',\r\n                            data: data.result.map((item) => item.well_count)\r\n                        }\r\n                    ],\r\n                    credits: {\r\n                        enabled: false\r\n                    },\r\n                    plotOptions: {\r\n                        column: {\r\n                            colorByPoint: true, // Apply colors individually to each column\r\n                            colors: ['#1e88e5', '#673ab7', '#d6d0de', '#90caf96e' /* Add more colors */]\r\n                        }\r\n                    }\r\n                };\r\n\r\n                const esp_install_options = {\r\n                    chart: {\r\n                        type: 'column'\r\n                    },\r\n                    title: {\r\n                        text: 'ESP Install Trends'\r\n                    },\r\n                    xAxis: {\r\n                        categories: data.summary_results.map((item) => item._id)\r\n                    },\r\n                    yAxis: {\r\n                        title: {\r\n                            text: 'Count'\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'ESP Install Count',\r\n                            data: data.summary_results.map((item) => item.esp_install_cnt)\r\n                        }\r\n                    ],\r\n                    credits: {\r\n                        enabled: false\r\n                    },\r\n                    plotOptions: {\r\n                        column: {\r\n                            colorByPoint: true, // Apply colors individually to each column\r\n                            colors: ['#673ab7', '#d6d0de', '#90caf96e', '#1e88e5' /* Add more colors */]\r\n                        }\r\n                    }\r\n                };\r\n                const esp_pull_options = {\r\n                    chart: {\r\n                        type: 'column'\r\n                    },\r\n                    title: {\r\n                        text: 'ESP Pull Trends'\r\n                    },\r\n                    xAxis: {\r\n                        categories: data.summary_results.map((item) => item._id)\r\n                    },\r\n                    yAxis: {\r\n                        title: {\r\n                            text: 'Count'\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'ESP Pull Count',\r\n                            data: data.summary_results.map((item) => item.esp_pull_cnt)\r\n                        }\r\n                    ],\r\n                    credits: {\r\n                        enabled: false\r\n                    },\r\n                    plotOptions: {\r\n                        column: {\r\n                            colorByPoint: true, // Apply colors individually to each column\r\n                            colors: ['#d6d0de', '#90caf96e', '#1e88e5', '#673ab7' /* Add more colors */]\r\n                        }\r\n                    }\r\n                };\r\n                const competitor_options = {\r\n                    chart: {\r\n                        type: 'column'\r\n                    },\r\n                    title: {\r\n                        text: 'Competitor Analysis'\r\n                    },\r\n                    xAxis: {\r\n                        categories: data.competetor_results.map((item) => item._id)\r\n                    },\r\n                    yAxis: {\r\n                        title: {\r\n                            text: 'Count'\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'Competitor Analysis',\r\n                            data: data.competetor_results.map((item) => item.value)\r\n                        }\r\n                    ],\r\n                    credits: {\r\n                        enabled: false\r\n                    },\r\n                    plotOptions: {\r\n                        column: {\r\n                            colorByPoint: true, // Apply colors individually to each column\r\n                            colors: ['#d6d0de', '#90caf96e', '#1e88e5', '#673ab7' /* Add more colors */]\r\n                        }\r\n                    }\r\n                };\r\n                // Set isLoading to false after data is fetched\r\n                this.setState({\r\n                    isLoading: false,\r\n                    well_options: well_options,\r\n                    rig_options: rig_options,\r\n                    esp_install_options: esp_install_options,\r\n                    esp_pull_options: esp_pull_options,\r\n                    competitor_options: competitor_options\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                // Handle errors here\r\n                toast.error('Error fetching graph data', {\r\n                    position: 'top-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: 'light'\r\n                });\r\n                console.error('Error fetching data:', error);\r\n\r\n                // Set isLoading to false even if there is an error\r\n                this.setState({ isLoading: false });\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            selectedOption,\r\n            selectedMonth,\r\n            selectedYear,\r\n            isLoading,\r\n            rig_options,\r\n            well_options,\r\n            esp_install_options,\r\n            esp_pull_options,\r\n            competitor_options\r\n        } = this.state;\r\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const yearOptions = Array.from({ length: 10 }, (_, i) => new Date().getFullYear() - 5 + i);\r\n\r\n        // const { summaryrecords, loading, error, totalKeywordSummaryRecords } = this.props;\r\n        // const { page, rowsPerPage, searchQuery, searchOption, dateRange, showCalendar } = this.state;\r\n\r\n        // if (loading) {\r\n        //     return <CircularProgress />;\r\n        // }\r\n\r\n        // if (error) {\r\n        //     return <Typography color=\"error\">{error}</Typography>;\r\n        // }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>Keyword Graph View</h1>\r\n                    <input type=\"radio\" value=\"day\" checked={selectedOption === 'day'} onChange={this.handleOptionChange} />\r\n                    <label htmlFor=\"dayOption\">Day Wise</label>\r\n                    <input type=\"radio\" value=\"month\" checked={selectedOption === 'month'} onChange={this.handleOptionChange} />\r\n                    <label htmlFor=\"monthOption\">Month Wise</label>\r\n                </div>\r\n                {selectedOption === 'day' ? (\r\n                    <div>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-month\">Select Month</InputLabel>\r\n                            <Select\r\n                                label=\"Select Month\"\r\n                                id=\"search-month\"\r\n                                value={selectedMonth}\r\n                                onChange={this.handleMonthChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                {monthNames.map((month, index) => (\r\n                                    <MenuItem key={index} value={index + 1}>\r\n                                        {month}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-year\">Select Year</InputLabel>\r\n                            <Select\r\n                                label=\"Select Year\"\r\n                                id=\"search-year\"\r\n                                value={selectedYear}\r\n                                onChange={this.handleYearChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                {yearOptions.map((year) => (\r\n                                    <MenuItem key={year} value={year}>\r\n                                        {year}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"selectYearMonth\">Select Year</InputLabel>\r\n                            <Select\r\n                                label=\"Select Year\"\r\n                                id=\"selectYearMonth\"\r\n                                value={selectedYear}\r\n                                onChange={this.handleYearChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                {yearOptions.map((year) => (\r\n                                    <MenuItem key={year} value={year}>\r\n                                        {year}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                )}\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ background: '#5e35b1', padding: '11px', margin: '11px' }}\r\n                    onClick={this.fetchData}\r\n                    // disabled={loading} // Disable the button if loading is true\r\n                >\r\n                    Submit\r\n                </Button>\r\n                {isLoading && (\r\n                    <div className=\"loader-container\">\r\n                        <InfinitySpin width=\"200\" color=\"#5e35b1\" ariaLabel=\"loading\" wrapperStyle wrapperClass />\r\n                    </div>\r\n                )}\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <MainCard className=\"card\">\r\n                            <HighchartsReact highcharts={Highcharts} options={rig_options} />\r\n                        </MainCard>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <MainCard className=\"card\">\r\n                            <HighchartsReact highcharts={Highcharts} options={well_options} />\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n                <br />\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <MainCard className=\"card\">\r\n                            <HighchartsReact highcharts={Highcharts} options={esp_install_options} />\r\n                        </MainCard>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                        <MainCard className=\"card\">\r\n                            <HighchartsReact highcharts={Highcharts} options={esp_pull_options} />\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n                <br />\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <MainCard className=\"card\">\r\n                            <HighchartsReact highcharts={Highcharts} options={competitor_options} />\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    summaryrecords: state.keyword.keywordSummaryRecords,\r\n    loading: state.keyword.loading,\r\n    error: state.keyword.error,\r\n    totalKeywordSummaryRecords: state.keyword.totalKeywordSummaryRecords\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchKeywordSummaryRecords,\r\n    fetchTotalKeywordSummaryRecords\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KeywordGraphView);\r\n"],"names":["KeywordGraphView","Component","constructor","props","super","handleOptionChange","event","this","setState","selectedOption","target","value","handleMonthChange","selectedMonth","parseInt","handleYearChange","selectedYear","fetchData","state","queryString","isLoading","fetch","BASE_BACKEND_URL","then","response","json","data","rig_options","chart","type","title","text","xAxis","categories","result","map","item","_id","yAxis","series","name","rig_count","credits","enabled","plotOptions","column","colorByPoint","colors","well_options","well_count","esp_install_options","summary_results","esp_install_cnt","esp_pull_options","esp_pull_cnt","competitor_options","competetor_results","catch","error","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","console","Date","getMonth","getFullYear","componentDidMount","render","yearOptions","Array","from","length","_","i","checked","onChange","htmlFor","sx","m","width","id","label","style","minWidth","month","index","year","variant","background","padding","margin","onClick","className","color","ariaLabel","wrapperStyle","wrapperClass","container","spacing","xs","sm","md","highcharts","Highcharts","options","mapDispatchToProps","fetchKeywordSummaryRecords","fetchTotalKeywordSummaryRecords","connect","summaryrecords","keyword","keywordSummaryRecords","loading","totalKeywordSummaryRecords"],"sourceRoot":""}