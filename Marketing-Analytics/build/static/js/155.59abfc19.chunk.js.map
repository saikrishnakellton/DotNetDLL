{"version":3,"file":"static/js/155.59abfc19.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CircularProgress/circularProgressClasses.js","../node_modules/@mui/material/CircularProgress/CircularProgress.js","views/KeywordBasedAnalysis/KeywordBasedAnalysis.js","../node_modules/@mui/icons-material/esm/Cancel.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Save.js"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCircularProgressUtilityClass(slot) {\n  return generateUtilityClass('MuiCircularProgress', slot);\n}\nconst circularProgressClasses = generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);\nexport default circularProgressClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { keyframes, css } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getCircularProgressUtilityClass } from './circularProgressClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst SIZE = 44;\nconst circularRotateKeyframe = keyframes(_t || (_t = _`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`));\nconst circularDashKeyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`));\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    color,\n    disableShrink\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`],\n    svg: ['svg'],\n    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']\n  };\n  return composeClasses(slots, getCircularProgressUtilityClass, classes);\n};\nconst CircularProgressRoot = styled('span', {\n  name: 'MuiCircularProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-block'\n}, ownerState.variant === 'determinate' && {\n  transition: theme.transitions.create('transform')\n}, ownerState.color !== 'inherit' && {\n  color: (theme.vars || theme).palette[ownerState.color].main\n}), ({\n  ownerState\n}) => ownerState.variant === 'indeterminate' && css(_t3 || (_t3 = _`\n      animation: ${0} 1.4s linear infinite;\n    `), circularRotateKeyframe));\nconst CircularProgressSVG = styled('svg', {\n  name: 'MuiCircularProgress',\n  slot: 'Svg',\n  overridesResolver: (props, styles) => styles.svg\n})({\n  display: 'block' // Keeps the progress centered\n});\n\nconst CircularProgressCircle = styled('circle', {\n  name: 'MuiCircularProgress',\n  slot: 'Circle',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  stroke: 'currentColor'\n}, ownerState.variant === 'determinate' && {\n  transition: theme.transitions.create('stroke-dashoffset')\n}, ownerState.variant === 'indeterminate' && {\n  // Some default value that looks fine waiting for the animation to kicks in.\n  strokeDasharray: '80px, 200px',\n  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.\n}), ({\n  ownerState\n}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4 || (_t4 = _`\n      animation: ${0} 1.4s ease-in-out infinite;\n    `), circularDashKeyframe));\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCircularProgress'\n  });\n  const {\n      className,\n      color = 'primary',\n      disableShrink = false,\n      size = 40,\n      style,\n      thickness = 3.6,\n      value = 0,\n      variant = 'indeterminate'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    disableShrink,\n    size,\n    thickness,\n    value,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n  if (variant === 'determinate') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;\n    rootStyle.transform = 'rotate(-90deg)';\n  }\n  return /*#__PURE__*/_jsx(CircularProgressRoot, _extends({\n    className: clsx(classes.root, className),\n    style: _extends({\n      width: size,\n      height: size\n    }, rootStyle, style),\n    ownerState: ownerState,\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other, {\n    children: /*#__PURE__*/_jsx(CircularProgressSVG, {\n      className: classes.svg,\n      ownerState: ownerState,\n      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,\n      children: /*#__PURE__*/_jsx(CircularProgressCircle, {\n        className: classes.circle,\n        style: circleStyle,\n        ownerState: ownerState,\n        cx: SIZE,\n        cy: SIZE,\n        r: (SIZE - thickness) / 2,\n        fill: \"none\",\n        strokeWidth: thickness\n      })\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, props => {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g '3rem'.\n   * @default 40\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness: PropTypes.number,\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate'])\n} : void 0;\nexport default CircularProgress;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    updateAnyKeywordState,\r\n    fetchKeywordAnalysisRecords,\r\n    fetchTotalKeywordAnalysisRecords,\r\n    updateQualifiedStatus\r\n} from '../../store/actions';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Select,\r\n    MenuItem,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport {\r\n    Delete as DeleteIcon,\r\n    Edit as EditIcon,\r\n    Save as SaveIcon,\r\n    Cancel as CancelIcon,\r\n    Download as DownloadIcon\r\n} from '@mui/icons-material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport './KeywordBasedAnalysis.css';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InfinitySpin } from 'react-loader-spinner';\r\nimport { BASE_BACKEND_URL } from '../../constants';\r\nimport { toast } from 'react-toastify';\r\nclass KeywordBasedAnalysis extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editableRows: new Set(),\r\n            loading_state: false,\r\n            editingRecord: {},\r\n            editingRecordId: null,\r\n            showCalendar: false\r\n        };\r\n    }\r\n\r\n    handleSearchQueryChange = (event) => {\r\n        this.props.updateAnyKeywordState({ kbasearchQuery: event.target.value });\r\n    };\r\n\r\n    handleSearchOptionChange = (event) => {\r\n        this.props.updateAnyKeywordState({ kbasearchOption: event.target.value });\r\n    };\r\n    handleSearchLevelOptionChange = (event) => {\r\n        this.props.updateAnyKeywordState({ kbasearchLevel: event.target.value });\r\n    };\r\n    handleSearchQualifiedOptionChange = (event) => {\r\n        this.props.updateAnyKeywordState({ kbasearchQualified: event.target.value });\r\n    };\r\n\r\n    handleSelectDateRangeChange = (ranges) => {\r\n        this.props.updateAnyKeywordState({\r\n            kbadateRange: ranges.selection\r\n        });\r\n    };\r\n    toggleCalendar = () => {\r\n        this.setState((prevState) => ({\r\n            showCalendar: !prevState.showCalendar\r\n        }));\r\n    };\r\n\r\n    handleSearch = () => {\r\n        this.props.updateAnyKeywordState({ kbapage: 0 });\r\n        this.props.fetchTotalKeywordAnalysisRecords();\r\n        this.props.fetchKeywordAnalysisRecords();\r\n    };\r\n\r\n    handleDownload = async () => {\r\n        this.setState({ loading_state: true });\r\n        const { kbapage, kbarowsPerPage, kbasearchLevel, kbasearchQuery, kbasearchOption, kbasearchQualified, kbadateRange } = this.props;\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${BASE_BACKEND_URL}/api/keyword_analysis?page=${kbapage}&rowsPerPage=${kbarowsPerPage}&searchQualified=${kbasearchQualified}&searchLevel=${kbasearchLevel}&searchQuery=${kbasearchQuery}&searchOption=${kbasearchOption}&startDate=${kbadateRange.startDate}&endDate=${kbadateRange.endDate}&download=true`,\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        Accept: 'text/csv'\r\n                    }\r\n                }\r\n            );\r\n\r\n            const blob = await response.blob();\r\n\r\n            const url = window.URL.createObjectURL(blob);\r\n\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', 'keyword_based_analysis.csv');\r\n            document.body.appendChild(link);\r\n            link.click();\r\n\r\n            this.setState({ loading_state: false });\r\n        } catch (error) {\r\n            toast.error('Error downloading file', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'light'\r\n            });\r\n            console.error('Error downloading records:', error);\r\n            this.setState({ loading_state: false });\r\n        }\r\n    };\r\n    componentDidMount() {\r\n        this.props.fetchTotalKeywordAnalysisRecords();\r\n        this.props.fetchKeywordAnalysisRecords();\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.props.updateAnyKeywordState({ kbapage: newPage });\r\n        this.props.fetchKeywordAnalysisRecords();\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        const newRowsPerPage = parseInt(event.target.value, 10);\r\n        this.props.updateAnyKeywordState({ kbarowsPerPage: newRowsPerPage, kbapage: 0 });\r\n        this.props.fetchKeywordAnalysisRecords();\r\n    };\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     // Check if the totalRecords prop has changed\r\n    //     if (this.props.totalKeywordAnalysisRecords !== prevProps.totalKeywordAnalysisRecords) {\r\n    //         // Reset the kbapage and kbarowsPerPage state to their initial values\r\n    //         this.props.updateAnyKeywordState({\r\n    //             kbapage: 0,\r\n    //             kbarowsPerPage: 10 // Set your desired default value for kbarowsPerPage here\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    handleInputChange = (event, record) => {\r\n        const { name, value } = event.target;\r\n        if (record) {\r\n            this.setState((prevState) => ({\r\n                editingRecord: {\r\n                    ...prevState.editingRecord,\r\n                    [name]: value\r\n                }\r\n            }));\r\n            console.log(this.state);\r\n        } else {\r\n            this.setState((prevState) => ({\r\n                newRecord: {\r\n                    ...prevState.newRecord,\r\n                    [name]: value\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    handleEditRecord = (record) => {\r\n        this.setState({ editingRecordId: record._id, editingRecord: record });\r\n    };\r\n    handleSaveRecord = (record) => {\r\n        const editedRecords = {};\r\n\r\n        Object.keys(this.state.editingRecord).forEach((key) => {\r\n            if (record.hasOwnProperty(key) && record[key] !== this.state.editingRecord[key]) {\r\n                editedRecords[key] = this.state.editingRecord[key];\r\n            }\r\n        });\r\n        this.props.updateQualifiedStatus(record._id, editedRecords.status, this.props.kbapage, this.props.kbarowsPerPage);\r\n        this.setState({ editingRecordId: null, editingRecord: {} });\r\n    };\r\n    handleCancelEdit = () => {\r\n        this.setState({ editingRecordId: null, editingRecord: {} });\r\n    };\r\n    handleDateChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        // Update the state for the selected date\r\n\r\n        // this.setState({ [name]: value });\r\n\r\n        // If both start and end dates are selected, perform validation\r\n        if (name === 'startDate' && this.state.endDate !== '') {\r\n            this.props.updateAnyKeywordState({\r\n                kbadateRange: { startDate: value, endDate: this.props.kbadateRange.endDate }\r\n            });\r\n            // const selectedStartDate = new Date(value);\r\n            // const selectedEndDate = new Date(this.state.endDate);\r\n\r\n            // if (selectedStartDate > selectedEndDate) {\r\n            //     // Handle validation error, e.g., show an error message\r\n            //     console.log('Start date cannot be after end date');\r\n            // }\r\n        } else if (name === 'endDate' && this.state.startDate !== '') {\r\n            this.props.updateAnyKeywordState({\r\n                kbadateRange: { startDate: this.props.kbadateRange.startDate, endDate: value }\r\n            });\r\n            // const selectedStartDate = new Date(this.state.startDate);\r\n            // const selectedEndDate = new Date(value);\r\n\r\n            // if (selectedStartDate > selectedEndDate) {\r\n            //     // Handle validation error, e.g., show an error message\r\n            //     console.log('Start date cannot be after end date');\r\n            // }\r\n        }\r\n    };\r\n    render() {\r\n        const {\r\n            records,\r\n            loading,\r\n            error,\r\n            totalKeywordAnalysisRecords,\r\n            kbapage,\r\n            kbarowsPerPage,\r\n            kbasearchQualified,\r\n            kbasearchQuery,\r\n            kbasearchOption,\r\n            kbasearchLevel,\r\n            kbadateRange\r\n        } = this.props;\r\n\r\n        const { editingRecordId, showCalendar, loading_state } = this.state;\r\n\r\n        function formatDate(date) {\r\n            const options = { day: 'numeric', month: 'short', year: '2-digit' };\r\n            return date.toLocaleDateString(undefined, options);\r\n        }\r\n        return (\r\n            <div>\r\n                {loading && (\r\n                    <div className=\"loader-container\">\r\n                        <InfinitySpin width=\"200\" color=\"#5e35b1\" ariaLabel=\"loading\" wrapperStyle wrapperClass />\r\n                    </div>\r\n                )}\r\n                <MainCard className=\"card\">\r\n                    <h1>Keyword Based Analysis</h1>\r\n                    {error && <Typography color=\"error\">{error}</Typography>}\r\n                    <div>\r\n                        {/* <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-date-query\"></InputLabel>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                id=\"search-date-query\"\r\n                                label=\"Date Range\"\r\n                                // value={`${kbadateRange.startDate.toDateString()} - ${kbadateRange.endDate.toDateString()}`}\r\n                                // placeholder=\"Select date range\"\r\n                                value={`${formatDate(kbadateRange.startDate)} - ${formatDate(kbadateRange.endDate)}`}\r\n                                onFocus={this.toggleCalendar}\r\n                            />\r\n                        </FormControl>\r\n                        {showCalendar && (\r\n                            <div className=\"calendar-container\">\r\n                                <DateRangePicker\r\n                                    ranges={[kbadateRange]}\r\n                                    onChange={this.handleSelectDateRangeChange}\r\n                                    showSelectionPreview={true} // Show the selected range in the calendar\r\n                                    direction=\"horizontal\"\r\n                                    color=\"#5e35b1\"\r\n                                    months={1}\r\n                                    // rangeColors=\"#5e35b1\"\r\n                                    scroll={{ enabled: true }}\r\n                                    showMonthArrow={true}\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{ background: '#5e35b1' }}\r\n                                    onClick={this.toggleCalendar}\r\n                                    // disabled={loading} // Disable the button if loading is true\r\n                                >\r\n                                    x close\r\n                                </Button>\r\n                            </div>\r\n                        )} */}\r\n                        <TextField\r\n                            sx={{ m: 1, width: 300 }}\r\n                            label=\"Start Date\"\r\n                            type=\"date\"\r\n                            name=\"startDate\"\r\n                            value={kbadateRange.startDate}\r\n                            onChange={this.handleDateChange}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            inputProps={{\r\n                                // min: this.state.startDate, // Disable past dates and dates before start date\r\n                                max: kbadateRange.endDate // Disable future dates\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            sx={{ m: 1, width: 300 }}\r\n                            label=\"End Date\"\r\n                            type=\"date\"\r\n                            name=\"endDate\"\r\n                            value={kbadateRange.endDate}\r\n                            onChange={this.handleDateChange}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            inputProps={{\r\n                                min: kbadateRange.startDate // Disable past dates and dates before start date\r\n                                // max: this.state.endDate // Disable future dates\r\n                            }}\r\n                        />\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-level\">Level</InputLabel>\r\n                            <Select\r\n                                label=\"Level\"\r\n                                id=\"search-level\"\r\n                                value={kbasearchLevel}\r\n                                onChange={this.handleSearchLevelOptionChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                <MenuItem value=\"All\">All</MenuItem>\r\n                                <MenuItem value=\"Level 1\">Level 1</MenuItem>\r\n                                <MenuItem value=\"Level 2\">Level 2</MenuItem>\r\n                                <MenuItem value=\"Level 3\">Level 3</MenuItem>\r\n                                <MenuItem value=\"Level 4\">Level 4</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-qualified\">Qualified Status</InputLabel>\r\n                            <Select\r\n                                label=\"Qualified Status\"\r\n                                id=\"search-qualified\"\r\n                                value={kbasearchQualified}\r\n                                onChange={this.handleSearchQualifiedOptionChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                <MenuItem value=\"All\">All</MenuItem>\r\n                                <MenuItem value=\"Qualified\">Qualified</MenuItem>\r\n                                <MenuItem value=\"Disqualified\">Disqualified</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-option\">Select Parameter</InputLabel>\r\n                            <Select\r\n                                label=\"Select Parameter\"\r\n                                id=\"search-option\"\r\n                                value={kbasearchOption}\r\n                                onChange={this.handleSearchOptionChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                <MenuItem value=\"All\">Select</MenuItem>\r\n                                <MenuItem value=\"rig_name\">RIG Name</MenuItem>\r\n                                <MenuItem value=\"well_name\">Well Name</MenuItem>\r\n                                <MenuItem value=\"job_type\">Job Type</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-query\"></InputLabel>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                id=\"search-query\"\r\n                                value={kbasearchQuery}\r\n                                onChange={this.handleSearchQueryChange}\r\n                                label=\"Search\"\r\n                                // placeholder=\"Search\"\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{ background: '#5e35b1', padding: '11px', margin: '11px' }}\r\n                            onClick={this.handleSearch}\r\n                            // disabled={loading} // Disable the button if loading is true\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                        {/* <Button\r\n                            variant=\"contained\"\r\n                            style={{ background: '#5e35b1', padding: '11px', margin: '11px' }}\r\n                            onClick={this.handleDownload}\r\n                            disabled={loading_state}\r\n                            // disabled={loading} // Disable the button if loading is true\r\n                        >\r\n                            {loading_state ? 'Downloading...' : 'Download Records'}\r\n                        </Button> */}\r\n                        <IconButton onClick={this.handleDownload} disabled={loading_state}>\r\n                            <DownloadIcon style={{ color: '#5e35b1' }} />\r\n                        </IconButton>\r\n                    </div>\r\n                    <br />\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            {this.state.loading && <CircularProgress />}\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Action</TableCell>\r\n                                            <TableCell>Operation Date</TableCell>\r\n                                            <TableCell>Rig</TableCell>\r\n                                            <TableCell>Well</TableCell>\r\n                                            <TableCell>Job Type</TableCell>\r\n                                            <TableCell>Qualified?</TableCell>\r\n                                            {records.search_keywords_categories.map((column) => (\r\n                                                <TableCell key={column}>{column}</TableCell>\r\n                                            ))}\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {records.daily_upload_data.map((record) => (\r\n                                            <TableRow key={record._id}>\r\n                                                <TableCell>\r\n                                                    {editingRecordId === record._id ? (\r\n                                                        <div>\r\n                                                            <IconButton onClick={() => this.handleSaveRecord(record)}>\r\n                                                                <SaveIcon color=\"success\" />\r\n                                                            </IconButton>\r\n                                                            <IconButton onClick={this.handleCancelEdit}>\r\n                                                                <CancelIcon color=\"error\" />\r\n                                                            </IconButton>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div>\r\n                                                            <IconButton onClick={() => this.handleEditRecord(record)}>\r\n                                                                <EditIcon style={{ color: '#5e35b1' }} />\r\n                                                            </IconButton>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell>{record.created_at}</TableCell>\r\n                                                <TableCell>{record.rig_name}</TableCell>\r\n                                                <TableCell>{record.well_name}</TableCell>\r\n                                                <TableCell>\r\n                                                    <span className=\"ellipsis\" title={record.job_type}>\r\n                                                        {record.job_type}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {editingRecordId === record._id ? (\r\n                                                        <Select\r\n                                                            name=\"status\"\r\n                                                            value={this.state.editingRecord.status}\r\n                                                            fullWidth\r\n                                                            onChange={(event) => this.handleInputChange(event, record)}\r\n                                                        >\r\n                                                            <MenuItem value=\"Qualified\">Qualified</MenuItem>\r\n                                                            <MenuItem value=\"Disqualified\">Disqualified</MenuItem>\r\n                                                        </Select>\r\n                                                    ) : (\r\n                                                        record.status\r\n                                                    )}\r\n                                                </TableCell>\r\n\r\n                                                {records.search_keywords_categories.map((column) => (\r\n                                                    <TableCell key={column + record._id}>{record.final_counts[column] ?? 0}</TableCell>\r\n                                                ))}\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, 50, 100, 500]}\r\n                                component=\"div\"\r\n                                // count={fileDetails.length} // Replace this with the total count of records from the API\r\n                                rowsPerPage={kbarowsPerPage}\r\n                                page={kbapage}\r\n                                onPageChange={this.handleChangePage}\r\n                                onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n                                count={totalKeywordAnalysisRecords}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </MainCard>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    records: state.keyword.keywordAnalysisRecords,\r\n    loading: state.keyword.loading,\r\n    error: state.keyword.error,\r\n    totalKeywordAnalysisRecords: state.keyword.totalKeywordAnalysisRecords,\r\n    kbapage: state.keyword.kbapage,\r\n    kbarowsPerPage: state.keyword.kbarowsPerPage,\r\n    kbadateRange: state.keyword.kbadateRange,\r\n    kbasearchQuery: state.keyword.kbasearchQuery,\r\n    kbasearchOption: state.keyword.kbasearchOption,\r\n    kbasearchLevel: state.keyword.kbasearchLevel,\r\n    kbasearchQualified: state.keyword.kbasearchQualified\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchKeywordAnalysisRecords,\r\n    fetchTotalKeywordAnalysisRecords,\r\n    updateQualifiedStatus,\r\n    updateAnyKeywordState\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KeywordBasedAnalysis);\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');"],"names":["getCircularProgressUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","_t","_t2","_t3","_t4","_","t","SIZE","circularRotateKeyframe","keyframes","circularDashKeyframe","CircularProgressRoot","styled","name","overridesResolver","props","styles","ownerState","root","variant","capitalize","color","theme","_extends","display","transition","transitions","create","vars","palette","main","css","CircularProgressSVG","svg","CircularProgressCircle","circle","disableShrink","circleDisableShrink","stroke","strokeDasharray","strokeDashoffset","React","inProps","ref","useThemeProps","className","size","style","thickness","value","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","circleStyle","rootStyle","rootProps","circumference","Math","PI","toFixed","round","transform","_jsx","clsx","width","height","role","children","viewBox","cx","cy","r","fill","strokeWidth","KeywordBasedAnalysis","Component","constructor","super","handleSearchQueryChange","event","this","updateAnyKeywordState","kbasearchQuery","target","handleSearchOptionChange","kbasearchOption","handleSearchLevelOptionChange","kbasearchLevel","handleSearchQualifiedOptionChange","kbasearchQualified","handleSelectDateRangeChange","ranges","kbadateRange","selection","toggleCalendar","setState","prevState","showCalendar","handleSearch","kbapage","fetchTotalKeywordAnalysisRecords","fetchKeywordAnalysisRecords","handleDownload","async","loading_state","kbarowsPerPage","response","fetch","BASE_BACKEND_URL","startDate","endDate","method","headers","Accept","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","error","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","console","handleChangePage","newPage","handleChangeRowsPerPage","newRowsPerPage","parseInt","handleInputChange","record","editingRecord","log","state","newRecord","handleEditRecord","editingRecordId","_id","handleSaveRecord","editedRecords","Object","keys","forEach","key","hasOwnProperty","updateQualifiedStatus","status","handleCancelEdit","handleDateChange","editableRows","Set","componentDidMount","render","records","loading","totalKeywordAnalysisRecords","ariaLabel","wrapperStyle","wrapperClass","MainCard","Typography","TextField","sx","m","label","type","onChange","InputLabelProps","shrink","inputProps","max","min","FormControl","InputLabel","id","Select","minWidth","MenuItem","Button","background","padding","margin","onClick","IconButton","disabled","Download","Grid","container","spacing","item","xs","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","search_keywords_categories","map","column","TableBody","daily_upload_data","Save","Cancel","Edit","created_at","rig_name","well_name","title","job_type","fullWidth","final_counts","TablePagination","rowsPerPageOptions","rowsPerPage","page","onPageChange","onRowsPerPageChange","count","mapDispatchToProps","connect","keyword","keywordAnalysisRecords","createSvgIcon","d"],"sourceRoot":""}