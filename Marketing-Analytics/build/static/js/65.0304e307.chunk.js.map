{"version":3,"file":"static/js/65.0304e307.chunk.js","mappings":"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","sources":["views/KeywordSummaryTable/KeywordSummaryTable.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchKeywordSummaryRecords, fetchTotalKeywordSummaryRecords, updateAnyKeywordState } from '../../store/actions';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Select,\r\n    MenuItem,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport {\r\n    Delete as DeleteIcon,\r\n    Edit as EditIcon,\r\n    Save as SaveIcon,\r\n    Cancel as CancelIcon,\r\n    Download as DownloadIcon\r\n} from '@mui/icons-material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InfinitySpin } from 'react-loader-spinner';\r\nimport { BASE_BACKEND_URL } from '../../constants';\r\nimport { toast } from 'react-toastify';\r\nclass KeywordSummaryTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showCalendar: false,\r\n            loadingState: false\r\n        };\r\n    }\r\n    handleSearchQueryChange = (event) => {\r\n        this.props.updateAnyKeywordState({ kstsearchQuery: event.target.value });\r\n    };\r\n\r\n    handleSearchOptionChange = (event) => {\r\n        this.props.updateAnyKeywordState({ kstsearchOption: event.target.value });\r\n    };\r\n\r\n    handleSelectDateRangeChange = (ranges) => {\r\n        this.props.updateAnyKeywordState({\r\n            kstdateRange: ranges.selection\r\n        });\r\n    };\r\n    toggleCalendar = () => {\r\n        this.setState((prevState) => ({\r\n            showCalendar: !prevState.showCalendar\r\n        }));\r\n    };\r\n\r\n    handleSearch = () => {\r\n        this.props.updateAnyKeywordState({ kstpage: 0 });\r\n\r\n        this.props.fetchTotalKeywordSummaryRecords();\r\n        this.props.fetchKeywordSummaryRecords();\r\n    };\r\n    componentDidMount() {\r\n        this.props.fetchTotalKeywordSummaryRecords();\r\n        this.props.fetchKeywordSummaryRecords();\r\n    }\r\n\r\n    handleDownload = async () => {\r\n        this.setState({ loadingState: true });\r\n        const { kstpage, kstrowsPerPage, kstsearchQuery, kstsearchOption, kstdateRange } = this.props;\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `${BASE_BACKEND_URL}/api/keyword_summary?page=${kstpage}&rowsPerPage=${kstrowsPerPage}&searchQuery=${kstsearchQuery}&searchOption=${kstsearchOption}&startDate=${kstdateRange.startDate}&endDate=${kstdateRange.endDate}&download=true`,\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        Accept: 'text/csv'\r\n                    }\r\n                }\r\n            );\r\n\r\n            const blob = await response.blob();\r\n\r\n            const url = window.URL.createObjectURL(blob);\r\n\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', 'keyword_summary.csv');\r\n            document.body.appendChild(link);\r\n            link.click();\r\n\r\n            this.setState({ loadingState: false });\r\n        } catch (error) {\r\n            toast.error('Error downloading file', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: 'light'\r\n            });\r\n            console.error('Error downloading records:', error);\r\n            this.setState({ loadingState: false });\r\n        }\r\n    };\r\n    handleChangePage = (event, newPage) => {\r\n        this.props.updateAnyKeywordState({ kstpage: newPage });\r\n        this.props.fetchKeywordSummaryRecords();\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        const newRowsPerPage = parseInt(event.target.value, 10);\r\n        this.props.updateAnyKeywordState({ kstrowsPerPage: newRowsPerPage, kstpage: 0 });\r\n        this.props.fetchKeywordSummaryRecords();\r\n    };\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     // Check if the totalRecords prop has changed\r\n    //     if (this.props.totalKeywordSummaryRecords !== prevProps.totalKeywordSummaryRecords) {\r\n    //         // Reset the kstpage and kstrowsPerPage state to their initial values\r\n    //         this.props.updateAnyKeywordState({\r\n    //             kstpage: 0,\r\n    //             kstrowsPerPage: 10 // Set your desired default value for kstrowsPerPage here\r\n    //         });\r\n    //     }\r\n    // }\r\n    handleDateChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        // Update the state for the selected date\r\n\r\n        // this.setState({ [name]: value });\r\n\r\n        // If both start and end dates are selected, perform validation\r\n        if (name === 'startDate' && this.state.endDate !== '') {\r\n            this.props.updateAnyKeywordState({\r\n                kstdateRange: { startDate: value, endDate: this.props.kstdateRange.endDate }\r\n            });\r\n            // const selectedStartDate = new Date(value);\r\n            // const selectedEndDate = new Date(this.state.endDate);\r\n\r\n            // if (selectedStartDate > selectedEndDate) {\r\n            //     // Handle validation error, e.g., show an error message\r\n            //     console.log('Start date cannot be after end date');\r\n            // }\r\n        } else if (name === 'endDate' && this.state.startDate !== '') {\r\n            this.props.updateAnyKeywordState({\r\n                kstdateRange: { startDate: this.props.kstdateRange.startDate, endDate: value }\r\n            });\r\n            // const selectedStartDate = new Date(this.state.startDate);\r\n            // const selectedEndDate = new Date(value);\r\n\r\n            // if (selectedStartDate > selectedEndDate) {\r\n            //     // Handle validation error, e.g., show an error message\r\n            //     console.log('Start date cannot be after end date');\r\n            // }\r\n        }\r\n    };\r\n    render() {\r\n        const {\r\n            summaryrecords,\r\n            loading,\r\n            error,\r\n            totalKeywordSummaryRecords,\r\n            kstpage,\r\n            kstrowsPerPage,\r\n            kstsearchQuery,\r\n            kstsearchOption,\r\n            kstdateRange\r\n        } = this.props;\r\n        const { showCalendar, loadingState } = this.state;\r\n\r\n        function formatDate(date) {\r\n            const options = { day: 'numeric', month: 'short', year: '2-digit' };\r\n            return date.toLocaleDateString(undefined, options);\r\n        }\r\n        return (\r\n            <div>\r\n                {loading && (\r\n                    <div className=\"loader-container\">\r\n                        <InfinitySpin width=\"200\" color=\"#5e35b1\" ariaLabel=\"loading\" wrapperStyle wrapperClass />\r\n                    </div>\r\n                )}\r\n                <MainCard className=\"card\">\r\n                    <h1>Keyword Summary Table</h1>\r\n                    {error && <Typography color=\"error\">{error}</Typography>}\r\n                    <div>\r\n                        {/* <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-date-query\"></InputLabel>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                id=\"search-date-query\"\r\n                                label=\"Date Range\"\r\n                                // value={`${kstdateRange.startDate.toDateString()} - ${kstdateRange.endDate.toDateString()}`}\r\n                                // placeholder=\"Select date range\"\r\n                                value={`${formatDate(kstdateRange.startDate)} - ${formatDate(kstdateRange.endDate)}`}\r\n                                onFocus={this.toggleCalendar}\r\n                            />\r\n                        </FormControl>\r\n                        {showCalendar && (\r\n                            <div className=\"calendar-container\">\r\n                                <DateRangePicker\r\n                                    ranges={[kstdateRange]}\r\n                                    onChange={this.handleSelectDateRangeChange}\r\n                                    showSelectionPreview={true} // Show the selected range in the calendar\r\n                                    direction=\"horizontal\"\r\n                                    color=\"#5e35b1\"\r\n                                    months={1}\r\n                                    // rangeColors=\"#5e35b1\"\r\n                                    scroll={{ enabled: true }}\r\n                                    showMonthArrow={true}\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    style={{ background: '#5e35b1' }}\r\n                                    onClick={this.toggleCalendar}\r\n                                    // disabled={loading} // Disable the button if loading is true\r\n                                >\r\n                                    x close\r\n                                </Button>\r\n                            </div>\r\n                        )} */}\r\n                        <TextField\r\n                            sx={{ m: 1, width: 300 }}\r\n                            label=\"Start Date\"\r\n                            type=\"date\"\r\n                            name=\"startDate\"\r\n                            value={kstdateRange.startDate}\r\n                            onChange={this.handleDateChange}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            inputProps={{\r\n                                // min: this.state.startDate, // Disable past dates and dates before start date\r\n                                max: kstdateRange.endDate // Disable future dates\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            sx={{ m: 1, width: 300 }}\r\n                            label=\"End Date\"\r\n                            type=\"date\"\r\n                            name=\"endDate\"\r\n                            value={kstdateRange.endDate}\r\n                            onChange={this.handleDateChange}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            inputProps={{\r\n                                min: kstdateRange.startDate // Disable past dates and dates before start date\r\n                                // max: this.state.endDate // Disable future dates\r\n                            }}\r\n                        />\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-option\">Select Parameter</InputLabel>\r\n                            <Select\r\n                                label=\"Select Parameter\"\r\n                                id=\"search-option\"\r\n                                value={kstsearchOption}\r\n                                onChange={this.handleSearchOptionChange}\r\n                                style={{ minWidth: '300px' }}\r\n                            >\r\n                                <MenuItem value=\"All\">Select</MenuItem>\r\n                                <MenuItem value=\"rig_name\">RIG Name</MenuItem>\r\n                                <MenuItem value=\"well_name\">Well Name</MenuItem>\r\n                                <MenuItem value=\"job_status\">Job Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"search-query\"></InputLabel>\r\n                            <TextField\r\n                                type=\"text\"\r\n                                id=\"search-query\"\r\n                                value={kstsearchQuery}\r\n                                onChange={this.handleSearchQueryChange}\r\n                                label=\"Search\"\r\n                                // placeholder=\"Search\"\r\n                            />\r\n                        </FormControl>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{ background: '#5e35b1', padding: '11px', margin: '11px' }}\r\n                            onClick={this.handleSearch}\r\n                            // disabled={loading} // Disable the button if loading is true\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                        {/* <Button\r\n                            variant=\"contained\"\r\n                            style={{ background: '#5e35b1', padding: '11px', margin: '11px' }}\r\n                            onClick={this.handleDownload}\r\n                            disabled={loadingState}\r\n                            // disabled={loading} // Disable the button if loading is true\r\n                        >\r\n                            {loadingState ? 'Downloading...' : 'Download Records'}\r\n                        </Button> */}\r\n\r\n                        <IconButton onClick={this.handleDownload} disabled={loadingState}>\r\n                            <DownloadIcon style={{ color: '#5e35b1' }} />\r\n                        </IconButton>\r\n                    </div>\r\n                    <br />\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            {/* {this.state.loading && <CircularProgress />} */}\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Operation Date</TableCell>\r\n                                            <TableCell>Rig</TableCell>\r\n                                            <TableCell>Well</TableCell>\r\n                                            <TableCell>Job Start Date</TableCell>\r\n                                            <TableCell>Job End Date</TableCell>\r\n                                            <TableCell>Job Status</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {summaryrecords.map((record) => (\r\n                                            <TableRow key={record._id}>\r\n                                                <TableCell>{record.created_at}</TableCell>\r\n                                                <TableCell>{record.rig_name}</TableCell>\r\n                                                <TableCell>{record.well_name}</TableCell>\r\n                                                <TableCell>{record.start_date}</TableCell>\r\n                                                <TableCell>{record.end_date}</TableCell>\r\n                                                <TableCell style={{ textTransform: 'capitalize' }}>{record.job_status}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, 50, 100, 500]}\r\n                                component=\"div\"\r\n                                // count={fileDetails.length} // Replace this with the total count of summaryrecords from the API\r\n                                rowsPerPage={kstrowsPerPage}\r\n                                page={kstpage}\r\n                                onPageChange={this.handleChangePage}\r\n                                onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n                                count={totalKeywordSummaryRecords}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </MainCard>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    summaryrecords: state.keyword.keywordSummaryRecords,\r\n    loading: state.keyword.loading,\r\n    error: state.keyword.error,\r\n    totalKeywordSummaryRecords: state.keyword.totalKeywordSummaryRecords,\r\n\r\n    kstpage: state.keyword.kstpage,\r\n    kstrowsPerPage: state.keyword.kstrowsPerPage,\r\n    kstsearchQuery: state.keyword.kstsearchQuery,\r\n    kstsearchOption: state.keyword.kstsearchOption,\r\n    kstdateRange: state.keyword.kstdateRange\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchKeywordSummaryRecords,\r\n    fetchTotalKeywordSummaryRecords,\r\n    updateAnyKeywordState\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KeywordSummaryTable);\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');"],"names":["KeywordSummaryTable","Component","constructor","props","super","handleSearchQueryChange","event","this","updateAnyKeywordState","kstsearchQuery","target","value","handleSearchOptionChange","kstsearchOption","handleSelectDateRangeChange","ranges","kstdateRange","selection","toggleCalendar","setState","prevState","showCalendar","handleSearch","kstpage","fetchTotalKeywordSummaryRecords","fetchKeywordSummaryRecords","handleDownload","async","loadingState","kstrowsPerPage","response","fetch","BASE_BACKEND_URL","startDate","endDate","method","headers","Accept","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","error","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","console","handleChangePage","newPage","handleChangeRowsPerPage","newRowsPerPage","parseInt","handleDateChange","name","state","componentDidMount","render","summaryrecords","loading","totalKeywordSummaryRecords","className","width","color","ariaLabel","wrapperStyle","wrapperClass","sx","m","label","type","onChange","InputLabelProps","shrink","inputProps","max","min","id","style","minWidth","variant","background","padding","margin","onClick","disabled","container","spacing","item","xs","component","Paper","map","record","created_at","rig_name","well_name","start_date","end_date","textTransform","job_status","_id","rowsPerPageOptions","rowsPerPage","page","onPageChange","onRowsPerPageChange","count","mapDispatchToProps","connect","keyword","keywordSummaryRecords","createSvgIcon","_jsx","d"],"sourceRoot":""}