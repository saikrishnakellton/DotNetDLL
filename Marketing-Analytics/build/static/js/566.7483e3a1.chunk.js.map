{"version":3,"file":"static/js/566.7483e3a1.chunk.js","mappings":"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","sources":["views/DailyDocumentUpload/FileUpload.js","../node_modules/@mui/icons-material/esm/Fullscreen.js","views/DailyDocumentUpload/ViewFile.js","../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/esm/GetApp.js","views/DailyDocumentUpload/FileArchival.js","views/DailyDocumentUpload/DailyDocumentUpload.js","../node_modules/@mui/icons-material/esm/Delete.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, FormHelperText, Grid, MenuItem, Select, TextField } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport { uploadFiles, fetchFileDetails, updateFileDate, fetchTotalRecords, updateAnyState } from '../../store/actions';\r\n\r\n// Replace 'your-redux-actions' with the actual path to your Redux actions\r\n\r\nclass FileUpload extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // operationDate: new Date().toISOString().split('T')[0],\r\n            category: 'Aramco D&WO Morning Report',\r\n            selectedFiles: [],\r\n            errorMessage: ''\r\n        };\r\n        this.fileInputRef = React.createRef();\r\n    }\r\n    handleClearFiles = () => {\r\n        this.setState({ selectedFiles: [] });\r\n        if (this.fileInputRef.current) {\r\n            this.fileInputRef.current.value = ''; // Reset the input value to clear selected files\r\n        }\r\n    };\r\n\r\n    handleDateChange = (event) => {\r\n        const { value } = event.target;\r\n        this.props.updateAnyState({ error_files: [] });\r\n        this.props.updateFileDate(value);\r\n        this.props.fetchTotalRecords(value);\r\n        // // Dispatch fetchFileDetails action on date change\r\n        this.props.fetchFileDetails(value);\r\n\r\n        this.handleClearFiles();\r\n    };\r\n\r\n    handleCategoryChange = (event) => {\r\n        this.setState({ category: event.target.value });\r\n    };\r\n\r\n    handleFileChange = (event) => {\r\n        this.props.updateAnyState({ error_files: [] });\r\n        const files = event.target.files;\r\n        const selectedFiles = Array.from(files);\r\n        const zipFiles = selectedFiles.filter((file) => {\r\n            const fileNameParts = file.name.split('.');\r\n            const fileExtension = fileNameParts[fileNameParts.length - 1];\r\n            return fileExtension.toLowerCase() === 'zip';\r\n        });\r\n\r\n        if (zipFiles.length > 1) {\r\n            // Display an error message for multiple zip files\r\n            this.setState({ errorMessage: 'Only one zip file allowed.' });\r\n            this.handleClearFiles();\r\n            return;\r\n        } else {\r\n            this.setState({ errorMessage: '' });\r\n        }\r\n\r\n        this.setState({ selectedFiles });\r\n    };\r\n\r\n    handleUpload = () => {\r\n        this.props.updateAnyState({ error_files: [] });\r\n        const { category, selectedFiles } = this.state;\r\n\r\n        // Perform validation for mandatory fields\r\n        if (!this.props.operationDate || !category || selectedFiles.length === 0) {\r\n            // Display an error message or handle the validation error as needed\r\n            this.setState({\r\n                errorMessage: 'Please fill in all the mandatory fields and select at least one file.'\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Dispatch the action to trigger the API call\r\n        this.props.uploadFiles(this.props.operationDate, category, selectedFiles);\r\n        this.handleClearFiles();\r\n    };\r\n\r\n    render() {\r\n        const { category, selectedFiles, errorMessage } = this.state;\r\n        const { operationDate, loading, error_files } = this.props;\r\n        return (\r\n            <div>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            sx={{ m: 1, width: 300 }}\r\n                            label=\"Operation Date\"\r\n                            type=\"date\"\r\n                            value={operationDate}\r\n                            onChange={this.handleDateChange}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControl sx={{ m: 1, width: 300 }}>\r\n                            <InputLabel id=\"category\">Category</InputLabel>\r\n                            <Select\r\n                                value={category}\r\n                                label=\"Category\"\r\n                                onChange={this.handleCategoryChange}\r\n                                style={{ minWidth: '300px' }}\r\n                                id=\"category\"\r\n                            >\r\n                                <MenuItem value=\"Aramco D&WO Morning Report\">Aramco D&WO Morning Report</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <input type=\"file\" accept=\".html,.zip\" multiple onChange={this.handleFileChange} ref={this.fileInputRef} />\r\n                        {selectedFiles.length > 0 && (\r\n                            <div>\r\n                                Selected Files:\r\n                                <ul style={{ maxHeight: '200px', overflow: 'auto' }}>\r\n                                    {selectedFiles.map((file, index) => (\r\n                                        <li key={index}>{file.name}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                        {errorMessage && <FormHelperText error>{errorMessage}</FormHelperText>}\r\n                    </Grid>\r\n                    {error_files.length != 0 && (\r\n                        <Grid item xs={12}>\r\n                            Files Failed to Upload due to duplicates:\r\n                            <div style={{ maxHeight: '200px', overflow: 'auto' }}>\r\n                                {error_files.map((error_file, index) => (\r\n                                    <FormHelperText key={index} error>\r\n                                        {error_file}\r\n                                    </FormHelperText>\r\n                                ))}\r\n                            </div>\r\n                        </Grid>\r\n                    )}\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button variant=\"contained\" style={{ background: '#5e35b1' }} onClick={this.handleUpload}>\r\n                            Upload\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// FileUpload.propTypes = {\r\n//     loading: PropTypes.bool.isRequired,\r\n//     uploadFiles: PropTypes.func.isRequired,\r\n//     operationDate: PropTypes.func.isRequired\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.upload.loading, // Assuming you have a loading state in Redux\r\n    operationDate: state.upload.operationDate,\r\n    error_files: state.upload.error_files\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    uploadFiles, // Assuming you have an uploadFiles action in Redux,\r\n    fetchFileDetails,\r\n    updateFileDate,\r\n    fetchTotalRecords,\r\n    updateAnyState\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileUpload);\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"\n}), 'Fullscreen');","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, FormHelperText, Grid, MenuItem, Select, TextField } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { Fullscreen, FullscreenExit } from '@mui/icons-material';\r\nimport './ViewFile.css';\r\n\r\n// import { uploadFiles, fetchFileDetails, updateFileDate } from '../../store/actions';\r\n// Replace 'your-redux-actions' with the actual path to your Redux actions\r\n\r\nclass ViewFile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isFullScreen: false\r\n        };\r\n    }\r\n\r\n    handleToggleFullScreen = () => {\r\n        this.setState((prevState) => ({\r\n            isFullScreen: !prevState.isFullScreen\r\n        }));\r\n\r\n        const element = document.getElementById('htmlContent');\r\n        if (element) {\r\n            if (element.requestFullscreen) {\r\n                if (document.fullscreenElement) {\r\n                    document.exitFullscreen();\r\n                } else {\r\n                    element.requestFullscreen();\r\n                }\r\n            } else if (element.mozRequestFullScreen) {\r\n                if (document.mozFullScreenElement) {\r\n                    document.mozCancelFullScreen();\r\n                } else {\r\n                    element.mozRequestFullScreen();\r\n                }\r\n            } else if (element.webkitRequestFullscreen) {\r\n                if (document.webkitFullscreenElement) {\r\n                    document.webkitExitFullscreen();\r\n                } else {\r\n                    element.webkitRequestFullscreen();\r\n                }\r\n            } else if (element.msRequestFullscreen) {\r\n                if (document.msFullscreenElement) {\r\n                    document.msExitFullscreen();\r\n                } else {\r\n                    element.msRequestFullscreen();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    render() {\r\n        const { loading, htmlContent, updateViewFIle } = this.props;\r\n        return (\r\n            <div>\r\n                <h3>File Name: {loading ? 'Loading...' : updateViewFIle.split('\\\\')[4]}</h3>\r\n                <button onClick={this.handleToggleFullScreen}>{this.state.isFullScreen ? <Fullscreen /> : <Fullscreen />}</button>\r\n                {/* <div\r\n                    dangerouslySetInnerHTML={{ __html: htmlContent }}\r\n                    id=\"htmlContent\"\r\n                    style={{\r\n                        backgroundColor: '#fff',\r\n                        width: '100%',\r\n                        height: '100%'\r\n                    }}\r\n                ></div> */}\r\n                <iframe\r\n                    src={`data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`}\r\n                    title=\"External HTML Content\"\r\n                    id=\"htmlContent\"\r\n                    style={{\r\n                        border: 'none', // Remove iframe border\r\n                        width: '100%',\r\n                        height: '1000px',\r\n                        backgroundColor: '#fff'\r\n                    }}\r\n                ></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewFile.propTypes = {\r\n    loading: PropTypes.bool.isRequired,\r\n    htmlContent: PropTypes.func.isRequired,\r\n    updateViewFIle: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.upload.loading, // Assuming you have a loading state in Redux\r\n    htmlContent: state.upload.htmlContent,\r\n    updateViewFIle: state.upload.updateViewFIle\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewFile);\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"\n}), 'GetApp');","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport { fetchFileDetails, deleteFile, updateViewFIle, fetchTotalRecords, updateAnyState } from '../../store/actions';\r\nimport {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Button,\r\n    Paper,\r\n    Modal,\r\n    Box,\r\n    Typography,\r\n    TablePagination,\r\n    MenuItem,\r\n    Select,\r\n    TextField\r\n} from '@mui/material';\r\nimport { Visibility, GetApp, Delete } from '@mui/icons-material';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { BASE_BACKEND_URL } from '../../constants';\r\nimport { toast } from 'react-toastify';\r\nclass FileArchival extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            deleteFileId: null,\r\n            isDeleteModalOpen: false\r\n        };\r\n    }\r\n\r\n    handleSearchQueryChange = (event) => {\r\n        this.props.updateAnyState({ searchQuery: event.target.value });\r\n    };\r\n\r\n    handleSearchOptionChange = (event) => {\r\n        this.props.updateAnyState({ searchOption: event.target.value });\r\n    };\r\n\r\n    handleSearch = () => {\r\n        this.props.updateAnyState({ page: 0 });\r\n        this.props.fetchTotalRecords();\r\n        this.props.fetchFileDetails();\r\n\r\n        // const { page, rowsPerPage, searchQuery, searchOption } = this.props;\r\n        // this.props.fetchTotalRecords(new Date().toISOString().split('T')[0], searchQuery, searchOption);\r\n        // this.props.fetchFileDetails(new Date().toISOString().split('T')[0], page, rowsPerPage, searchQuery, searchOption);\r\n    };\r\n    componentDidMount() {\r\n        this.props.fetchTotalRecords();\r\n        this.props.fetchFileDetails();\r\n\r\n        // const { page, rowsPerPage } = this.state;\r\n        // this.props.fetchTotalRecords(new Date().toISOString().split('T')[0]);\r\n        // this.props.fetchFileDetails(new Date().toISOString().split('T')[0], page, rowsPerPage);\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.props.updateAnyState({ page: newPage });\r\n        this.props.fetchFileDetails();\r\n\r\n        // this.setState({ page: newPage }, () => {\r\n        //     const { page, rowsPerPage } = this.state;\r\n        //     const { operationDate } = this.props;\r\n        //     this.props.fetchFileDetails(operationDate, page, rowsPerPage);\r\n        // });\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        const newRowsPerPage = parseInt(event.target.value, 10);\r\n        this.props.updateAnyState({ rowsPerPage: newRowsPerPage, page: 0 });\r\n        this.props.fetchFileDetails();\r\n        // this.setState({ rowsPerPage: newRowsPerPage, page: 0 }, () => {\r\n        //     const { page, rowsPerPage } = this.state;\r\n        //     const { operationDate } = this.props;\r\n        //     this.props.fetchFileDetails(operationDate, page, rowsPerPage);\r\n        // });\r\n    };\r\n\r\n    handleDelete = (fileId) => {\r\n        // Open the delete confirmation modal\r\n        this.setState({\r\n            deleteFileId: fileId,\r\n            isDeleteModalOpen: true\r\n        });\r\n    };\r\n\r\n    handleConfirmDelete = () => {\r\n        const { deleteFileId } = this.state;\r\n        // // Handle pagination navigation based on deletion result\r\n        if (this.props.fileDetails.length == 1 && this.props.page != 0) {\r\n            this.props.updateAnyState({ page: this.props.page - 1 });\r\n        }\r\n        this.props.deleteFile(deleteFileId);\r\n        // .then(() => {\r\n        //     const { operationDate } = this.props;\r\n        //     this.props.fetchFileDetails(operationDate); // Refresh file details after successful deletion\r\n        // })\r\n        // .catch((error) => {\r\n        //     console.error('Error deleting file:', error);\r\n        // });\r\n\r\n        // Close the delete confirmation modal\r\n        this.setState({\r\n            deleteFileId: null,\r\n            isDeleteModalOpen: false\r\n        });\r\n    };\r\n\r\n    handleCancelDelete = () => {\r\n        // Close the delete confirmation modal without deleting the file\r\n        this.setState({\r\n            deleteFileId: null,\r\n            isDeleteModalOpen: false\r\n        });\r\n    };\r\n\r\n    handleView = (filePath) => {\r\n        this.props.updateViewFIle(filePath);\r\n        // Implement logic to view the file content\r\n        // You can show the HTML content of the file in a modal or a separate component\r\n        // Example code: open a modal and pass the fileId to show the corresponding file content\r\n    };\r\n\r\n    handleDownload = (filePath) => {\r\n        // Call your FastAPI endpoint to initiate the file download\r\n        fetch(`${BASE_BACKEND_URL}/api/download?file_name=${encodeURIComponent(filePath)}`)\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    // Convert the response to a blob\r\n                    return response.blob();\r\n                } else {\r\n                    toast.error('Error downloading file', {\r\n                        position: 'top-right',\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: 'light'\r\n                    });\r\n                    throw new Error('Error downloading file');\r\n                }\r\n            })\r\n            .then((blob) => {\r\n                // Create a temporary URL for the blob\r\n                const url = URL.createObjectURL(blob);\r\n                // Create a link element\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.download = filePath.split('\\\\')[4];\r\n                // Programmatically click the link to start the download\r\n                link.click();\r\n                // Clean up the temporary URL\r\n                URL.revokeObjectURL(url);\r\n            })\r\n            .catch((error) => {\r\n                // Handle the error\r\n                console.error(error);\r\n            });\r\n    };\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     // Check if the totalRecords prop has changed\r\n    //     if (this.props.totalRecords !== prevProps.totalRecords) {\r\n    //         // Reset the page and rowsPerPage state to their initial values\r\n\r\n    //         this.props.updateAnyState({\r\n    //             page: 0\r\n    //             // rowsPerPage: 10 // Set your desired default value for rowsPerPage here\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const { fileDetails, loading, totalRecords, page, rowsPerPage, searchQuery, searchOption } = this.props;\r\n        const { isDeleteModalOpen } = this.state;\r\n        // const pageCount = Math.ceil(totalRecords / rowsPerPage);\r\n\r\n        if (!fileDetails) {\r\n            return <p>No file details available.</p>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>File Details</h2>\r\n                <div>\r\n                    <FormControl sx={{ m: 1, width: 300 }}>\r\n                        <InputLabel id=\"search-option-file\">Select Parameter</InputLabel>\r\n                        <Select\r\n                            value={searchOption}\r\n                            onChange={this.handleSearchOptionChange}\r\n                            style={{ minWidth: '300px' }}\r\n                            label=\"Select Parameter\"\r\n                            id=\"search-option-file\"\r\n                            // InputLabelProps={{\r\n                            //     shrink: true\r\n                            // }}\r\n                        >\r\n                            {/* <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem> */}\r\n                            <MenuItem value=\"rig_name\">RIG Name</MenuItem>\r\n                            <MenuItem value=\"well_name\">Well Name</MenuItem>\r\n                            <MenuItem value=\"file_path\">File Name</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl sx={{ m: 1, width: 300 }}>\r\n                        <InputLabel id=\"search-query\"></InputLabel>\r\n                        <TextField\r\n                            type=\"text\"\r\n                            id=\"search-query\"\r\n                            value={searchQuery}\r\n                            onChange={this.handleSearchQueryChange}\r\n                            label=\"Search\"\r\n                            // placeholder=\"Search\"\r\n                        />\r\n                    </FormControl>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        style={{ background: '#5e35b1', padding: '11px', width: '100px', margin: '11px' }}\r\n                        onClick={this.handleSearch}\r\n                        // disabled={loading} // Disable the button if loading is true\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </div>\r\n                <br />\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Actions</TableCell>\r\n                                <TableCell>Operation Date</TableCell>\r\n                                <TableCell>RIG Name</TableCell>\r\n                                <TableCell>Well Name</TableCell>\r\n                                <TableCell>File Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {fileDetails.map((file) => (\r\n                                <TableRow key={file._id}>\r\n                                    <TableCell>\r\n                                        <div style={{ display: 'flex' }}>\r\n                                            <Button\r\n                                                onClick={() => this.handleDelete(file._id)}\r\n                                                sx={{ padding: 0.5, margin: 0, minWidth: 'unset' }}\r\n                                            >\r\n                                                <Delete color=\"error\" />\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={() => this.handleView(file.file_path)}\r\n                                                sx={{ padding: 0.5, margin: 0, minWidth: 'unset' }}\r\n                                            >\r\n                                                <Visibility style={{ color: '#5e35b1' }} />\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={() => this.handleDownload(file.file_path)}\r\n                                                sx={{ padding: 0.5, margin: 0, minWidth: 'unset' }}\r\n                                            >\r\n                                                <GetApp color=\"success\" />\r\n                                            </Button>\r\n                                        </div>\r\n                                    </TableCell>\r\n                                    <TableCell>{file.created_at}</TableCell>\r\n                                    <TableCell>{file.rig_name}</TableCell>\r\n                                    <TableCell>{file.well_name}</TableCell>\r\n                                    <TableCell>{file.file_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25, 50, 100, 500]}\r\n                    component=\"div\"\r\n                    // count={fileDetails.length} // Replace this with the total count of records from the API\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={this.handleChangePage}\r\n                    onRowsPerPageChange={this.handleChangeRowsPerPage}\r\n                    count={totalRecords}\r\n                />\r\n                {/* <div>\r\n                    {Array.from({ length: pageCount }, (_, index) => (\r\n                        <Button key={index} onClick={() => this.handleChangePage(null, index)} disabled={index === page}>\r\n                            {index + 1}\r\n                        </Button>\r\n                    ))}\r\n                </div> */}\r\n                {/* Delete Confirmation Modal */}\r\n                <Modal open={isDeleteModalOpen} onClose={this.handleCancelDelete}>\r\n                    <Box\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: '50%',\r\n                            left: '50%',\r\n                            transform: 'translate(-50%, -50%)',\r\n                            width: 400,\r\n                            bgcolor: 'background.paper',\r\n                            boxShadow: 24,\r\n                            p: 4\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"h6\">Confirm Delete</Typography>\r\n                        <Typography variant=\"body1\">Are you sure you want to delete this file?</Typography>\r\n                        <Button onClick={this.handleConfirmDelete}>Yes</Button>\r\n                        <Button onClick={this.handleCancelDelete}>No</Button>\r\n                    </Box>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// FileArchival.propTypes = {\r\n//     loading: PropTypes.bool.isRequired,\r\n//     fileDetails: PropTypes.array.isRequired,\r\n//     fetchFileDetails: PropTypes.func.isRequired,\r\n//     deleteFile: PropTypes.func.isRequired,\r\n//     operationDate: PropTypes.func.isRequired,\r\n//     totalRecords: PropTypes.func.isRequired\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n    fileDetails: state.upload.fileDetails,\r\n    loading: state.upload.loading,\r\n    operationDate: state.upload.operationDate,\r\n    totalRecords: state.upload.totalRecords,\r\n    page: state.upload.page,\r\n    rowsPerPage: state.upload.rowsPerPage,\r\n    searchQuery: state.upload.searchQuery,\r\n    searchOption: state.upload.searchOption\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchFileDetails,\r\n    deleteFile,\r\n    updateViewFIle,\r\n    fetchTotalRecords,\r\n    updateAnyState\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FileArchival);\r\n","import React, { Component } from 'react';\r\nimport FileUpload from './FileUpload';\r\nimport ViewFile from './ViewFile';\r\nimport FileArchival from './FileArchival';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { Grid } from '@mui/material';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { InfinitySpin } from 'react-loader-spinner';\r\nclass DailyDocumentUpload extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.loading && (\r\n                    <div className=\"loader-container\">\r\n                        <InfinitySpin width=\"200\" color=\"#5e35b1\" ariaLabel=\"loading\" wrapperStyle wrapperClass />\r\n                    </div>\r\n                )}\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={12} md={this.props.htmlContent ? 5 : 12}>\r\n                        <MainCard className=\"card\">\r\n                            <h1>Daily Document Upload</h1>\r\n                            <FileUpload />\r\n                            <FileArchival />\r\n                        </MainCard>\r\n                    </Grid>\r\n\r\n                    {this.props.htmlContent && (\r\n                        <Grid item xs={12} sm={12} md={7}>\r\n                            <MainCard className=\"card\">\r\n                                <ViewFile />\r\n                            </MainCard>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewFile.propTypes = {\r\n    loading: PropTypes.bool.isRequired,\r\n    htmlContent: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.upload.loading, // Assuming you have a loading state in Redux\r\n    htmlContent: state.upload.htmlContent\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DailyDocumentUpload);\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');"],"names":["FileUpload","Component","constructor","props","super","handleClearFiles","this","setState","selectedFiles","fileInputRef","current","value","handleDateChange","event","target","updateAnyState","error_files","updateFileDate","fetchTotalRecords","fetchFileDetails","handleCategoryChange","category","handleFileChange","files","Array","from","filter","file","fileNameParts","name","split","length","toLowerCase","errorMessage","handleUpload","state","operationDate","uploadFiles","React","render","loading","Grid","container","spacing","item","xs","TextField","sx","m","width","label","type","onChange","InputLabelProps","shrink","FormControl","InputLabel","id","Select","style","minWidth","MenuItem","accept","multiple","ref","maxHeight","overflow","map","index","FormHelperText","error","error_file","Button","variant","background","onClick","mapDispatchToProps","connect","upload","createSvgIcon","_jsx","d","ViewFile","handleToggleFullScreen","prevState","isFullScreen","element","document","getElementById","requestFullscreen","fullscreenElement","exitFullscreen","mozRequestFullScreen","mozFullScreenElement","mozCancelFullScreen","webkitRequestFullscreen","webkitFullscreenElement","webkitExitFullscreen","msRequestFullscreen","msFullscreenElement","msExitFullscreen","htmlContent","updateViewFIle","Fullscreen","src","encodeURIComponent","title","border","height","backgroundColor","FileArchival","handleSearchQueryChange","searchQuery","handleSearchOptionChange","searchOption","handleSearch","page","handleChangePage","newPage","handleChangeRowsPerPage","newRowsPerPage","parseInt","rowsPerPage","handleDelete","fileId","deleteFileId","isDeleteModalOpen","handleConfirmDelete","fileDetails","deleteFile","handleCancelDelete","handleView","filePath","handleDownload","fetch","BASE_BACKEND_URL","then","response","ok","blob","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","Error","url","URL","createObjectURL","link","createElement","href","download","click","revokeObjectURL","catch","console","componentDidMount","totalRecords","padding","margin","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","display","_id","Delete","color","file_path","Visibility","GetApp","created_at","rig_name","well_name","file_name","TablePagination","rowsPerPageOptions","onPageChange","onRowsPerPageChange","count","Modal","open","onClose","Box","top","left","transform","bgcolor","boxShadow","p","Typography","DailyDocumentUpload","className","ariaLabel","wrapperStyle","wrapperClass","sm","md","MainCard","PropTypes"],"sourceRoot":""}